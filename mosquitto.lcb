library community.livecode.trevordevore.mosquitto

  use com.livecode.engine
  use com.livecode.foreign

  metadata title is "Mosquitto"
  metadata author is "Trevor DeVore"
  metadata version is "0.1.0"

  constant kDebugLog is false
  constant kMCStringEncodingUTF8 is 4

  public type Mosquitto_ptr is Pointer // to struct
  public foreign type MosquittoMessage binds to "MCAggregateTypeInfo:ErrEEa"

  -- void *memcpy(void *str1, const void *str2, size_t n)
  -- Aggregate pointer uses `out` when copying to
  -- Aggregate pointer is `inout` when it is the source that is being copied from.
  -- Pointer is always `in`
  foreign handler PointerToMosquittoMessage(out rAggregate as MosquittoMessage, in pPointer as Pointer, in pSize as UIntSize) returns nothing binds to "c:memcpy"
  foreign handler PointerToMosquittoMessageWin(out rAggregate as MosquittoMessage, in pPointer as Pointer, in pSize as UIntSize) returns nothing binds to "msvcrt>memcpy"

  foreign handler MCStringEncode(in pString as String, in pEncoding as CUInt, in pIsExternalRep as CBool, out rUTF8String as Data) returns CBool binds to "<builtin>"
  foreign handler MCStringCreateWithCString(in pString as Pointer, out rString as String) returns CBool binds to "<builtin>"
  foreign handler MCStringCreateWithBytes(in pBytes as Pointer, in pByteCount as LCUInt, in pEncoding as CUInt, in pIsExternalRep as CBool, out rString as String) returns CBool binds to "<builtin>"
  foreign handler MCDataConvertStringToData(in pString as String, out rData as Data) returns CBool binds to "<builtin>"
  foreign handler MCDataGetBytePtr(in pData as Data) returns optional Pointer binds to "<builtin>"

  foreign handler mosquitto_lib_version (out pMajor as CInt, out pMinor as CInt, out pRevision as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_lib_version"

  foreign handler mosquitto_lib_init () \
        returns nothing binds to "c:libmosquitto>mosquitto_lib_init"

  foreign handler mosquitto_lib_cleanup () \
        returns nothing binds to "c:libmosquitto>mosquitto_lib_cleanup"

  foreign handler mosquitto_new (in pClientId as optional ZStringNative, in pCleanSession as CBool, in pUserData as optional Pointer) \
        returns Mosquitto_ptr \
        binds to "c:libmosquitto>mosquitto_new"

  foreign handler mosquitto_destroy (in pMosquitto as Mosquitto_ptr) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_destroy"

  foreign handler mosquitto_reinitialise (in pMosquitto as Mosquitto_ptr, in pId as optional ZStringNative, in pCleanSession as CBool, in pUserData as optional Pointer) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_reinitialise"

  foreign handler mosquitto_publish (in pMosquitto as Mosquitto_ptr, inout rMessageId as optional CInt, in pTopic as Pointer, \
        in pPayloadLength as CInt, in pPayload as optional Pointer, in pQoS as CInt, in pRetain as CBool) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_publish"

  foreign handler mosquitto_subscribe (in pMosquitto as Mosquitto_ptr, inout rMessageId as CInt, in pSubPattern as Pointer, in pQoS as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_subscribe"

  foreign handler mosquitto_unsubscribe (in pMosquitto as Mosquitto_ptr, inout rMessageId as CInt, in pUnsubPattern as Pointer) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_unsubscribe"

  foreign handler mosquitto_message_copy (in pDestinationMessage as MosquittoMessage, in pSourceMessage as MosquittoMessage) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_message_copy"

  foreign handler mosquitto_message_free (in pMessage as Pointer) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_message_free"

  // Authorization
  foreign handler mosquitto_username_pw_set (in pMosquitto as Mosquitto_ptr, in pUsername as ZStringNative, in pPassword as ZStringNative) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_username_pw_set"

  foreign handler mosquitto_tls_set (in pMosquitto as Mosquitto_ptr, in pCaFile as optional ZStringNative, in pCaPath as optional ZStringNative, \
        in pCertFile as optional ZStringNative, in pKeyFile as optional ZStringNative, in pPwCAllback as optional Pointer) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_tls_set"

  // Connect/disconnect
  foreign handler mosquitto_connect (in pMosquitto as Mosquitto_ptr, in pHost as ZStringNative, in pPort as CInt, in pKeepAlive as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_connect"

  foreign handler mosquitto_reconnect (in pMosquitto as Mosquitto_ptr) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_reconnect"

  foreign handler mosquitto_disconnect (in pMosquitto as Mosquitto_ptr) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_disconnect"

  // Run loop
  foreign handler MCHandlerGetFunctionPtr(in pHandler as any, out rFuncPtr as Pointer) returns CBool binds to "<builtin>"

  // Callbacks
  public foreign handler type mosquitto_connect_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pReturnCode as CInt) returns nothing
  public foreign handler type mosquitto_disconnect_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pReasonCode as CInt) returns nothing
  public foreign handler type mosquitto_publish_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
  public foreign handler type mosquitto_message_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessage as Pointer) returns nothing
  public foreign handler type mosquitto_subscribe_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt, in pQoSCount as CInt, in pGrantedQoSArray as optional Pointer) returns nothing
  public foreign handler type mosquitto_unsubscribe_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
  public foreign handler type mosquitto_log_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pLevel as CInt, in pString as optional ZStringNative) returns nothing

  foreign handler mosquitto_connect_callback_set (in pMosquitto as Mosquitto_ptr, in pHandler as mosquitto_connect_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_connect_callback_set"

  foreign handler mosquitto_disconnect_callback_set (in pMosquitto as Mosquitto_ptr, in pHandler as mosquitto_disconnect_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_disconnect_callback_set"

  foreign handler mosquitto_publish_callback_set (in pMosquitto as Mosquitto_ptr, in pHandler as mosquitto_publish_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_publish_callback_set"

  foreign handler mosquitto_message_callback_set (in pMosquitto as Mosquitto_ptr, in pHandler as mosquitto_message_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_message_callback_set"

  foreign handler mosquitto_subscribe_callback_set (in pMosquitto as Mosquitto_ptr, in pHandler as mosquitto_subscribe_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_subscribe_callback_set"

  foreign handler mosquitto_unsubscribe_callback_set (in pMosquitto as Mosquitto_ptr, in pHandler as mosquitto_unsubscribe_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_unsubscribe_callback_set"

  foreign handler mosquitto_log_callback_set (in pMosquitto as Mosquitto_ptr, in pHandler as mosquitto_log_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_log_callback_set"

  // Netowrk loop
  foreign handler mosquitto_loop (in pMosquitto as Mosquitto_ptr, in pTimeout as CInt, in pMaxPackets as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop"

  foreign handler mosquitto_loop_forever (in pMosquitto as Mosquitto_ptr, in pTimeout as CInt, in pMaxPackets as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop_forever"

  foreign handler mosquitto_loop_start (in pMosquitto as Mosquitto_ptr) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop_start"

  foreign handler mosquitto_loop_stop (in pMosquitto as Mosquitto_ptr, in pForce as CBool) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop_stop"


  private variable mRunloopAction as MCRunloopActionRef
  private variable mMosquitto as optional Mosquitto_ptr
  private variable mUseThreads as Boolean
  private variable mEnableLogging as Boolean
  private variable mCallbackObject as optional ScriptObject


  /**
  Summary: Returns the libMosquitto library version

  Returns: Version number in x.y.z format
  */
  public handler MosquittoVersion() returns String
    variable tMajor as Integer
    variable tMinor as Integer
    variable tRevision as Integer
    variable tResult as Integer

    unsafe
      put mosquitto_lib_version(tMajor, tMinor, tRevision) into tResult
    end unsafe

    return tMajor formatted as string & "." & tMinor formatted as string & "." & tRevision formatted as string
  end handler


  public handler MosquittoSetCallbackTarget(in pObjectRef as String) returns nothing
    if pObjectRef is not empty then
      resolve script object pObjectRef into mCallbackObject
    else
      put nothing into mCallbackObject
    end if
  end handler


  /**
  Summary: Handler for testing during development

  Returns: Error message
  */
  public handler MosquittoInitialize(in pClientName as String) returns String
    variable tError as String
    variable tClientId as optional String

    if mMosquitto is not nothing then
      return ""
    end if

    if pClientName is not "" then
      put pClientName into tClientId
    end if

    unsafe
      put false into mEnableLogging

      mosquitto_lib_init()

      put mosquitto_new(tClientId, true, nothing) into mMosquitto

      if mMosquitto is not nothing then
        mosquitto_log_callback_set(mMosquitto, LogCallback)
        mosquitto_connect_callback_set(mMosquitto, ConnectCallback)
        mosquitto_publish_callback_set(mMosquitto, PublishCallback)
        mosquitto_message_callback_set(mMosquitto, MessageCallback)
        mosquitto_subscribe_callback_set(mMosquitto, SubscribeCallback)
        mosquitto_unsubscribe_callback_set(mMosquitto, UnsubscribeCallback)

        if mUseThreads then
          mosquitto_loop_start(mMosquitto)
        else
          variable tDoRunLoopFunc as MCRunloopActionCallback
          variable tContext as optional Pointer
          if MCHandlerGetFunctionPtr(doRunLoop, tDoRunLoopFunc) then
            MCEngineAddRunloopAction(tDoRunLoopFunc, tContext, mRunloopAction)
          else
            put "Unable to set run loop" into tError
          end if
        end if
      else
        put "failed to initialize mosquitto" into tError
      end if
    end unsafe

    return tError
  end handler


  public handler MosquittoCleanup() returns nothing
    unsafe
      if mMosquitto is not nothing then
        if mUseThreads then
          mosquitto_loop_stop(mMosquitto, true)
        else
          MCEngineRemoveRunloopAction(mRunloopAction)
        end if
        mosquitto_destroy(mMosquitto)
        put nothing into mMosquitto
      end if
      mosquitto_lib_cleanup()
    end unsafe
  end handler


  public handler MosquittoSetUsernamePassword(in pUsername as String, in pPassword as String) returns String
    variable tResult as Integer

    unsafe
      put mosquitto_username_pw_set(mMosquitto, pUsername, pPassword) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoTLSSet(in pCaFile as optional String, in pCaPath as optional String, in pCertFile as optional String, in pKeyFile as optional String) returns String
    variable tResult as Integer

    if pCaFile is "" then
      put nothing into pCaFile
    end if
    if pCaPath is "" then
      put nothing into pCaPath
    end if
    if pCertFile is "" then
      put nothing into pCertFile
    end if
    if pKeyFile is "" then
      put nothing into pKeyFile
    end if

    unsafe
      put mosquitto_tls_set(mMosquitto, pCaFile, pCaPath, pCertFile, pKeyFile, nothing) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoConnect(in pHost as String, in pPort as Integer, in pKeepAlive as Integer) returns String
    variable tResult as Integer

    unsafe
      put mosquitto_connect(mMosquitto, pHost, pPort, pKeepAlive) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoReconnect() returns String
    variable tResult as Integer

    unsafe
      put mosquitto_reconnect(mMosquitto) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoDisconnect() returns String
    variable tResult as Integer

    unsafe
      put mosquitto_disconnect(mMosquitto) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoEnableLogging(in pEnable as Boolean) returns nothing
    put pEnable into mEnableLogging
  end handler


  /**
  Summary: Publishes a message

  Parameters:
  pTopic: UTF-8 String
  pMessage: UTF-8 String

  Returns: Error message
  */
  public handler MosquittoPublish(in pTopic as String, in pMessage as String, in pQualityOfService as Integer) returns String
    variable tTopicData as Data
    variable tTopicPtr as optional Pointer
    variable tMsgData as Data
    variable tMsgPtr as optional Pointer
    variable messageId as Integer
    variable tResult as Integer

    -- 0: The broker/client will deliver the message once, with no confirmation.
    -- 1: The broker/client will deliver the message at least once, with confirmation required.
    -- 2: The broker/client will deliver the message exactly once by using a four step handshake.
    unsafe
      if MCStringEncode(pTopic, kMCStringEncodingUTF8, false, tTopicData) then
        if MCStringEncode(pMessage, kMCStringEncodingUTF8, false, tMsgData) then
          put MCDataGetBytePtr(tTopicData) into tTopicPtr
          put MCDataGetBytePtr(tMsgData) into tMsgPtr
          if tMsgPtr is not nothing then
            put mosquitto_publish (mMosquitto, messageId, tTopicPtr, the number of bytes in tMsgData, tMsgPtr, pQualityOfService, false) into tResult
          end if
        end if
      end if
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  /**
  Summary: Subscribe to a topic.

  Returns: Error message
  */
  public handler MosquittoSubscribe(in pTopic as String, in pQualityOfService as Integer) returns String
    variable tTopicData as Data
    variable tTopicPtr as optional Pointer
    variable messageId as Integer
    variable tResult as Integer

    unsafe
      if MCStringEncode(pTopic, kMCStringEncodingUTF8, false, tTopicData) then
        put MCDataGetBytePtr(tTopicData) into tTopicPtr
        put mosquitto_subscribe (mMosquitto, messageId, tTopicPtr, pQualityOfService) into tResult
      end if
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  /**
  Summary: Unsubscribe from a topic.

  Returns: Error message
  */
  public handler MosquittoUnsubscribe(in pTopic as String) returns String
    variable tTopicPtr as Pointer
    variable tTopicData as Data
    variable messageId as Integer
    variable tResult as Integer

    unsafe
      if MCStringEncode(pTopic, kMCStringEncodingUTF8, false, tTopicData) then
        put MCDataGetBytePtr(tTopicData) into tTopicPtr
        put mosquitto_unsubscribe (mMosquitto, messageId, tTopicPtr) into tResult
      end if
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  /**
  Summary: Called by LiveCode during the main event loop.

  Returns: nothing
  */
  private handler doRunLoop(in pContext as optional Pointer) returns nothing
    unsafe
      mosquitto_loop(mMosquitto, 0, 1)
    end unsafe
  end handler


  private handler ConnectCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pResult as CInt) returns nothing
    _PostMessage("MosquittotConnectCallback", [resolveErrorMessage(pResult)])
  end handler


  private handler PublishCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
    _PostMessage("MosquittotPublishCallback", [pMessageId])
  end handler


  private handler SubscribeCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt, in pQoSCount as CInt, in pGrantedQoSArray as optional Pointer) returns nothing
    _PostMessage("MosquittotSubscribeCallback", [pMessageId])
  end handler


  private handler UnsubscribeCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
    _PostMessage("MosquittotUnsubscribeCallback", [pMessageId])
  end handler


  private handler MessageCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessage as Pointer) returns nothing
    -- struct mosquitto_message{
    --   int mid;
    --   char *topic;
    --   void *payload;
    --   int payloadlen;
    --   int qos;
    --   bool retain;
    -- };
    variable tError as String
    variable tPayload as String
    variable tTopic as String
    variable tMessage as MosquittoMessage
    variable tSize as Integer

    if the architecture ends with "64" then
      put 8+8+8+4+4+1 into tSize
    else
      put 4+4+4+4+4+1 into tSize
    end if

    unsafe
      if the operating system is "windows" then
        PointerToMosquittoMessageWin(tMessage, pMessage, tSize)
      else
        PointerToMosquittoMessage(tMessage, pMessage, tSize)
      end if

      if tMessage is nothing then
        put "Unable to get message from pointer" into tError
      end if
    end unsafe

    if tMessage is not nothing then
      if element 2 of tMessage is not nothing then
        unsafe
          if not MCStringCreateWithCString(element 2 of tMessage, tTopic) then
            put "failed to convert const char * to String" into tError
          end if
        end unsafe
      end if

      if element 3 of tMessage is not nothing then
        unsafe
          if not MCStringCreateWithBytes(element 3 of tMessage, element 4 of tMessage, kMCStringEncodingUTF8, false, tPayload) then
            put "unable to extract payload from message data" into tError
          end if
        end unsafe
      end if
    end if

    _PostMessage("MosquittotMessageCallback", [tTopic, tPayload])
  end handler


  private handler LogCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pLevel as CInt, in pString as optional ZStringNative) returns nothing
    if mEnableLogging then
      _PostMessage("MosquittoLogCallback", [pLevel, pString])
    end if
  end handler


  private handler _PostMessage(in pMessage as String, in pArgs as List) returns nothing
    if mCallbackObject is not nothing then
      post pMessage to mCallbackObject with pArgs
    else
      post pMessage with pArgs
    end if

    if kDebugLog then
      push pMessage onto front of pArgs
      log pArgs
    end if
  end handler


  /**
  Summary: Converts a Mosquitto error number to a string

  Returns: nothing
  */
  private handler resolveErrorMessage(in pErrNumber as Integer) returns String
    if pErrNumber is 0 then
      return ""
    else if pErrNumber is 1 then
      return "out of memory"
    else if pErrNumber is 2 then
      return "protocol error communicating with the broker"
    else if pErrNumber is 3 then
      return "the input parameters were invalid"
    else if pErrNumber is 4 then
      return "the client isn't connected to the broker"
    else if pErrNumber is 5 then
      return "connection refused"
    else if pErrNumber is 6 then
      return "not found"
    else if pErrNumber is 7 then
      return "connection lost"
    else if pErrNumber is 8 then
      return "TLS error"
    else if pErrNumber is 9 then
      return "payload length is too large"
    else if pErrNumber is 10 then
      return "thread support is not enabled"
    else if pErrNumber is 11 then
      return "authorization error"
    else if pErrNumber is 12 then
      return "ACL denied"
    else if pErrNumber is 13 then
      return "unknown error"
    else if pErrNumber is 14 then
      // System call returned error.
      return the system error message
    else if pErrNumber is 15 then
      return "EAI lookup error"
    else if pErrNumber is 16 then
      return "proxy error"
    else if pErrNumber is 17 then
      return "plugin defer error"
    else if pErrNumber is 18 then
      return "invalid UTF-8"
    else if pErrNumber is 19 then
      return "keep alive error"
    else if pErrNumber is 20 then
      return "lookup error"
    else if pErrNumber is 21 then
      return "malformed packet"
    else if pErrNumber is 22 then
      return "duplicate property"
    else if pErrNumber is 23 then
      return "TLS handshake error"
    else if pErrNumber is 24 then
      return "QOS not supported"
    else if pErrNumber is 25 then
      return "oversize packet error"
    else if pErrNumber is 26 then
      return "OCSP error"
    else
      return pErrNumber formatted as string
    end if
  end handler
end library
